"use strict";function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}!function(){angular.module("app",["ngAnimate","ngMaterial","ngMessages","ui.router"])}(),angular.module("app").run(["$templateCache",function(e){e.put("drCell/drCell.html",'<div class="cell" ng-class="c.returnCellClass()">\n\t<div class="cell__fig"></div>\n</div>\n'),e.put("drField/drField.html",'<ul class="cell-list">\n\t<li class="cell-list__item"\n\t\tng-repeat="(idx, cell) in cf.cells"\n\t\tng-style="{\'left\': cell.col*60 + \'px\', \'top\': cell.row*60 + \'px\'}"\n\t\tng-click="cf.cellCLick($event, cell, idx)">\n\n\t\t<dr-cell type="{{cell.type}}" state="{{cell.state}}"></dr-cell>\n\n\t</li>\n</ul>')}]),function(){function e(e,t,l,n,r){this.$scope=e,this.$http=t,this.$state=l,this.cellState="square",this.init()}angular.module("app").controller("mainCtrl",e),e.prototype.init=function(){},e.$inject=["$scope","$http","$state","$stateParams","$timeout"]}();var _createClass=function(){function e(e,t){for(var l=0;l<t.length;l++){var n=t[l];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,l,n){return l&&e(t.prototype,l),n&&e(t,n),t}}();!function(){angular.module("app").directive("drCell",["$templateCache",function(t){function l(e,t,l,n){}return{link:l,restrict:"AEC",scope:{},template:t.get("drCell/drCell.html"),controller:e,controllerAs:"c",bindToController:{type:"@?",state:"@?"}}}]);var e=function(){function e(t,l){_classCallCheck(this,e)}return _createClass(e,[{key:"returnCellClass",value:function(){var e="cell_type-"+(this.type||"square"),t="cell_state-"+(this.state||"default");return[e,t]}}]),e}();e.$inject=["$scope","$timeout"]}();var _createClass=function(){function e(e,t){for(var l=0;l<t.length;l++){var n=t[l];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,l,n){return l&&e(t.prototype,l),n&&e(t,n),t}}();!function(){angular.module("app").directive("drField",["$templateCache",function(t){function l(e,t,l,n){}return{link:l,restrict:"AEC",scope:{},template:t.get("drField/drField.html"),controller:e,controllerAs:"cf",bindToController:{cellClick:"=?",size:"=?",ctx:"=?"}}}]);var e=function(){function e(t,l,n){_classCallCheck(this,e),this.drFieldService=t,this.size&&(this.drFieldService.size=this.size),this.$scope=l,this.$timeout=n,this.init()}return _createClass(e,[{key:"init",value:function(){this.cells=this.drFieldService.createNewArr(this.size)}},{key:"cellCLick",value:function(e,t,l){var n=this;if(e.preventDefault(),e.stopPropagation(),"default"===t.state){for(var r=0;r<this.cells.length;r+=1)this.cells[r].state="default";this.activeCell=t,this.activeCell.state="active",this.activeCellIdx=l,this.drFieldService.markClosestCell(this.cells,this.size,l,"passive")}else"passive"===t.state?(this.drFieldService.replaceElements(this.cells,this.activeCellIdx,l),this.$timeout(function(){for(var e=0;e<n.cells.length;e+=1)n.cells[e].state="default"},200)):"active"===t.state&&(t.state="default",this.activeCell=void 0,this.activeCellIdx=void 0,this.drFieldService.markClosestCell(this.cells,this.size,l,"default"))}}]),e}();e.$inject=["drFieldService","$scope","$timeout"]}(),function(){angular.module("app").service("drFieldService",["drFiledFactory","$timeout",function(e,t){function l(e){var t=Math.floor(Math.random()*e.length);return e[t]}function n(t){for(var n=angular.copy(e.types),r=0;r<t.length;r+=1)for(var i=0;i<n.length;i+=1)t[r]===n[i]&&n.splice(i,1);return l(n)}function r(e,t){for(var l=0;l<e.length;l+=1)e[l].col=l%t,e[l].row=Math.floor(l/t)}function i(t,r){var i=l(e.types),s=[];a(t,r,s),c(t,r,s),s.length&&(i=n(s)),t.push({type:i,state:"default"})}function a(e,t,l){var n=e.length%t;n>1&&e[e.length-2].type===e[e.length-1].type&&l.push(e[e.length-1].type)}function c(e,t,l){var n=Math.floor(e.length/t);n>1&&e[e.length-t].type===e[e.length-2*t].type&&l.push(e[e.length-t].type)}function s(e,t,l){for(var n=0;n<e.length;n+=1){for(var r=n%l,i=1,a=e[n].type,c=1;c<l-r&&e[n+c].type===a;c+=1)i++;if(i>2){for(var s=[],o=1;o<=i;o+=1)s.push(n+o);t.push({length:i,type:a,idxArr:s}),n+=i-1,i=0}else i=0}}function o(e,t,l){for(var n=0,r=0;r<e.length;r+=l){var i=Math.floor(r/l),a=1;e[r].type;console.log("---=== i ===---",r);for(var c=0;c<l-i;c+=1);a=0,Math.floor(r/l)+1===l&&(n++,r=n-l)}}this.createNewArr=function(e){for(var t=[],l=0;l<e*e;l++)i(t,e);return r(t,e),t},this.markClosestCell=function(e,t,l,n){e[l-t]&&(e[l-t].state=n),e[l+t]&&(e[l+t].state=n),e[l-1]&&(e[l-1].state=n),e[l+1]&&(e[l+1].state=n)},this.replaceElements=function(e,l,n){var r=this,i={col:e[l].col,row:e[l].row,type:e[l].type,state:e[l].state},a={col:e[n].col,row:e[n].row,type:e[n].type,state:e[n].state};e[l].col=a.col,e[l].row=a.row,e[n].col=i.col,e[n].row=i.row,t(function(){var t=angular.copy(e[l]);e[l]=e[n],e[n]=t,r.checkRowElements(e)},200)},this.checkRowElements=function(t){var l=[],n=e.size;s(t,l,n),o(t,l,n),console.log("---=== result ===---",l)}}])}(),function(){angular.module("app").factory("drFiledFactory",function(){var e=["square","circle","triangle"],t=["default","active","passive","note"],l=9;return{types:e,states:t,size:l}})}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,

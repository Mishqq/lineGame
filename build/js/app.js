"use strict";function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}!function(){angular.module("app",["ngAnimate","ngMaterial","ngMessages","ui.router"])}(),angular.module("app").run(["$templateCache",function(t){t.put("drCell/drCell.html",'<div class="cell" ng-class="c.returnCellClass()">\n\t<!--<div class="cell__type" ng-bind="c.type"></div>-->\n\t<div class="cell__fig"></div>\n</div>\n'),t.put("drDashboard/drDashboard.html",'<div class="dashboard">\n\t<div class="dashboard__row">\n\t\t<div class="dashboard__label">Последние удалённые элементы</div>\n\t\t<div class="dashboard__val">\n\t\t\t<ul>\n\t\t\t\t<li ng-repeat="item in db.points.lastDel track by $index" ng-bind="item"></li>\n\t\t\t</ul>\n\t\t</div>\n\t</div>\n\t<div class="dashboard__row">\n\t\t<div class="dashboard__label">Очки за последний ход</div>\n\t\t<div class="dashboard__val" ng-bind="db.points.lastPoints"></div>\n\t</div>\n\t<div class="dashboard__row">\n\t\t<div class="dashboard__label">Общее количество очков</div>\n\t\t<div class="dashboard__val" ng-bind="db.points.allPoints"></div>\n\t</div>\n</div>'),t.put("drField/drField.html","<ul class=\"cell-list\"ng-style=\"{'width': cf.size*60 + 'px', 'height': cf.size*60 + 'px'}\">\n\t<li class=\"cell-list__item\"\n\t\tng-repeat=\"(idx, cell) in cf.cells track by cell.id\"\n\t\tng-style=\"{'left': cell.col*60 + 'px', 'top': cell.row*60 + 'px'}\"\n\t\tng-click=\"cf.cellCLick($event, cell, idx)\">\n\n\t\t<dr-cell type=\"{{cell.type}}\" state=\"{{cell.state}}\"></dr-cell>\n\n\t</li>\n</ul>"),t.put("drMenu/drMenu.html",'<div class="menu">\n\t<div class="menu__title">Новая игра</div>\n\t<ul class="menu-list">\n\t\t<li class="menu-list__item">\n\t\t\t<a href="" ng-click="m.newGame($event, 5)">5x5</a>\n\t\t</li>\n\t\t<li class="menu-list__item">\n\t\t\t<a href="" ng-click="m.newGame($event, 7)">7x7</a>\n\t\t</li>\n\t\t<li class="menu-list__item">\n\t\t\t<a href="" ng-click="m.newGame($event, 9)">9x9</a>\n\t\t</li>\n\t\t<li class="menu-list__item">\n\t\t\t<a href="" ng-click="m.newGame($event, 11)">11x11</a>\n\t\t</li>\n\t</ul>\n</div>')}]),function(){function t(t,e,n,l,i,r,a){this.$scope=t,this.$http=e,this.$state=n,this.drFieldService=a,this.points=a.points,this.drFiledFactory=r,this.cellState="square",this.init()}angular.module("app").controller("mainCtrl",t),t.prototype.init=function(){},t.$inject=["$scope","$http","$state","$stateParams","$timeout","drFiledFactory","drFieldService"]}();var _createClass=function(){function t(t,e){for(var n=0;n<e.length;n++){var l=e[n];l.enumerable=l.enumerable||!1,l.configurable=!0,"value"in l&&(l.writable=!0),Object.defineProperty(t,l.key,l)}}return function(e,n,l){return n&&t(e.prototype,n),l&&t(e,l),e}}();!function(){angular.module("app").directive("drCell",["$templateCache",function(e){function n(t,e,n,l){}return{link:n,restrict:"AEC",scope:{},template:e.get("drCell/drCell.html"),controller:t,controllerAs:"c",bindToController:{type:"@?",state:"@?"}}}]);var t=function(){function t(e,n){_classCallCheck(this,t)}return _createClass(t,[{key:"returnCellClass",value:function(){var t="cell_type-"+(this.type||"square"),e="cell_state-"+(this.state||"default");return[t,e]}}]),t}();t.$inject=["$scope","$timeout"]}(),function(){angular.module("app").directive("drDashboard",["$templateCache",function(e){function n(t,e,n,l){}return{link:n,restrict:"AEC",scope:{},template:e.get("drDashboard/drDashboard.html"),controller:t,controllerAs:"db",bindToController:{}}}]);var t=function e(t,n,l){_classCallCheck(this,e),this.points=l.points};t.$inject=["$scope","$timeout","drFieldService"]}();var _createClass=function(){function t(t,e){for(var n=0;n<e.length;n++){var l=e[n];l.enumerable=l.enumerable||!1,l.configurable=!0,"value"in l&&(l.writable=!0),Object.defineProperty(t,l.key,l)}}return function(e,n,l){return n&&t(e.prototype,n),l&&t(e,l),e}}();!function(){angular.module("app").directive("drField",["$templateCache",function(e){function n(t,e,n,l){}return{link:n,restrict:"AEC",scope:{},template:e.get("drField/drField.html"),controller:t,controllerAs:"cf",bindToController:{cellClick:"=?",size:"=?",ctx:"=?"}}}]);var t=function(){function t(e,n,l,i){_classCallCheck(this,t),this.drFieldService=e,this.drFiledFactory=n,this.size&&(this.drFiledFactory.size=this.size),this.$scope=l,this.init()}return _createClass(t,[{key:"init",value:function(){this.cells=this.drFieldService.createNewArr(this.size)}},{key:"cellCLick",value:function(t,e,n){t.preventDefault(),t.stopPropagation(),"default"===e.state?(this.activeCellIdx=n,this.drFieldService.setActiveCell(n,!0)):"passive"===e.state?this.drFieldService.replaceElements(this.activeCellIdx,n):"active"===e.state&&(this.activeCellIdx=void 0,this.drFieldService.setActiveCell(n,!1))}}]),t}();t.$inject=["drFieldService","drFiledFactory","$scope","$timeout"]}(),function(){angular.module("app").service("drFieldService",["drFiledFactory","$timeout",function(t,e){function n(t,e){return t.row!==e.row?t.row-e.row:t.row===e.row?t.col-e.col:void 0}function l(t){var e=Math.floor(Math.random()*t.length);return t[e]}function i(e){for(var n=angular.copy(t.types),i=0;i<e.length;i+=1)for(var r=0;r<n.length;r+=1)e[i]===n[r]&&n.splice(r,1);return l(n)}function r(){for(var t=0;t<C.length;t+=1)C[t].col=t%m.size,C[t].row=Math.floor(t/m.size)}function a(e){var n=s(e),r=n.length?i(n):l(t.types);return r||"square"}function s(t){var e=m.size,n=[],l=C.length%e;l>1&&C[C.length-2].type===C[C.length-1].type&&n.push(C[C.length-1].type);var i=Math.floor(C.length/e);return i>1&&C[C.length-e].type===C[C.length-2*e].type&&n.push(C[C.length-e].type),t-Math.floor(t/e)*e>1&&C[t-1]&&C[t-2]&&C[t-1].type===C[t-2].type&&n.push(C[t-1].type),Math.ceil(t/e)*e-t>1&&C[t+1]&&C[t+2]&&C[t+1].type===C[t+2].type&&n.push(C[t+1].type),Math.ceil(t/e)>2&&C[t-e]&&C[t-2*e]&&C[t-e].type===C[t-2*e].type&&n.push(C[t-e].type),e-Math.ceil(t/e)>2&&C[t+e]&&C[t+2*e]&&C[t+e].type===C[t+2*e].type&&n.push(C[t+e].type),t-Math.floor(t/e)*e>0&&Math.ceil(t/e)*e-t>0&&C[t-1]&&C[t+1]&&C[t-1].type===C[t+1].type&&n.push(C[t-1].type),Math.ceil(t/e)>1&&e-Math.ceil(t/e)>1&&C[t-e]&&C[t+e]&&C[t-e].type===C[t+e].type&&n.push(C[t-e].type),n}function o(t){for(var e=m.size,n=0;n<C.length;n+=e){for(var l=[n],i=C[n].type,r=1;r<e;r+=1)if("empty"!==C[n+r].type&&i===C[n+r].type)l.push(n+r);else{if(l.length>2)break;l.length=0,l.push(n+r),i=C[n+r].type}l.length>2&&t.push({length:l.length,type:i,idxArr:angular.copy(l)}),l.length=0}}function c(t){for(var e=m.size,n=0;n<e;n+=1){for(var l=[n],i=C[n].type,r=1;r<e;r+=1)if("empty"!==C[n+r*e].type&&i===C[n+r*e].type)l.push(n+r*e);else{if(l.length>2)break;l.length=0,l.push(n+r*e),i=C[n+r*e].type}l.length>2&&t.push({length:l.length,type:i,idxArr:angular.copy(l)}),l.length=0}}function u(t,n){var l={col1:C[t].col,row1:C[t].row,col2:C[n].col,row2:C[n].row};C[t].col=l.col2,C[t].row=l.row2,e(function(){C[n].col=l.col1,C[n].row=l.row1},200)}function d(){for(var t=function(t){"empty"===C[t].type&&(C[t].type=a(t),C[t].state="new",e(function(){C[t].state="default"},500))},n=0;n<C.length;n+=1)t(n)}function h(){var t=[];o(t),c(t),t&&t.length>1&&y(t);for(var l=0;l<C.length;l+=1)C[l].state="default";if(!t.length){for(var i=!1,r=0;r<C.length;r+=1)if("empty"===C[r].type){i=!0;break}return i&&e(function(){d(),e(function(){C.sort(n),h()},500)},500),!1}e(function(){p(t),f(t),e(function(){g(t),v(),C.sort(n),h()},500)},250)}function p(t){for(var e=0;e<t.length;e+=1)for(var n=t[e],l=0;l<n.idxArr.length;l+=1)C[n.idxArr[l]].state="delete"}function f(e){m.points.lastDel.length=0;for(var n=0;n<e.length;n+=1){var l=e[n].type,i=t.pointsMap[l]*e[n].length;m.points.lastPoints=i,m.points.allPoints+=i,m.points.lastDel.push(e[n].length+" "+l)}}function v(){for(var t=m.size,e=0,n=0;e<t;e+=1){for(var l=t-1;l>=0;l-=1)"empty"!==C[e+l*t].type?n>0&&(C[e+l*t].row+=+n):(C[e+l*t].toRow=n,C[e+l*t].row=n,n++);n=0}}function g(t){for(var e=0;e<t.length;e+=1){for(var n=t[e],l=0;l<n.idxArr.length;l+=1)C[n.idxArr[l]].type="empty";for(var i=0;i<C.length;i+=1)C[i].state="default"}}function y(t){t:for(var e=0;e<t.length;e+=1)for(var n=t[e],l=n.length,i=0;i<n.idxArr.length;i+=1){var r=n.idxArr[i];if(e<t.length-1)for(var a=e+1;a<t.length;a+=1){var s=t[a],o=s.length;if(!~s.idxArr.indexOf(r))if(l>o)t.splice(a,1);else{if(l<o){t.splice(e,1),e--;continue t}l===o&&t.splice(a,1)}}}}var m=this;this.matrixModel=[];var C=this.matrixModel;this.points={lastDel:[],lastPoints:0,allPoints:0},this.reset=function(){this.points.lastDel.length=0,this.points.lastPoints=0,this.points.allPoints=0},this.createNewArr=function(e){C.length=0,this.size=e||t.size;for(var n=0;n<e*e;n++){var l=a();C.push({id:n,type:l,state:"default"})}return r(),C},this.setActiveCell=function(t,e){for(var n=0;n<C.length;n+=1)C[n].state="default";C[t].state=e?"active":"default";var l=Math.floor(t/m.size),i=t-Math.floor(t/m.size)*m.size,r=e?"passive":"default";i>0&&i<m.size-1?(C[t-1].state=r,C[t+1].state=r):0===i?C[t+1].state=r:i===m.size-1&&(C[t-1].state=r),l>0&&l<m.size-1?(C[t-m.size].state=r,C[t+m.size].state=r):0===l?C[t+m.size].state=r:l===m.size-1&&(C[t-m.size].state=r)},this.replaceElements=function(t,l){u(t,l),e(function(){C.sort(n),h()},200)}}])}(),function(){angular.module("app").factory("drFiledFactory",function(){var t=["square","circle","triangle"],e=["default","active","passive","note"],n={square:10,triangle:20,circle:30},l=9;return{types:t,states:e,size:l,pointsMap:n}})}();var _createClass=function(){function t(t,e){for(var n=0;n<e.length;n++){var l=e[n];l.enumerable=l.enumerable||!1,l.configurable=!0,"value"in l&&(l.writable=!0),Object.defineProperty(t,l.key,l)}}return function(e,n,l){return n&&t(e.prototype,n),l&&t(e,l),e}}();!function(){angular.module("app").directive("drMenu",["$templateCache",function(e){function n(t,e,n,l){}return{link:n,restrict:"AEC",scope:{},template:e.get("drMenu/drMenu.html"),controller:t,controllerAs:"m",bindToController:{}}}]);var t=function(){function t(e,n,l,i){_classCallCheck(this,t),this.drFiledFactory=l,this.drFieldService=i}return _createClass(t,[{key:"newGame",value:function(t,e){t.preventDefault(),t.stopPropagation(),this.drFiledFactory.size=e,this.drFieldService.createNewArr(e),this.drFieldService.reset()}}]),t}();t.$inject=["$scope","$timeout","drFiledFactory","drFieldService"]}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,

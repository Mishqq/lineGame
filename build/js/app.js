"use strict";function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}!function(){angular.module("app",["ngAnimate","ngMaterial","ngMessages","ui.router"])}(),angular.module("app").run(["$templateCache",function(t){t.put("drCell/drCell.html",'<div class="cell" ng-class="c.returnCellClass()">\n\t<div class="cell__fig"></div>\n</div>\n'),t.put("drField/drField.html","<ul class=\"cell-list\"ng-style=\"{'width': cf.size*60 + 'px', 'height': cf.size*60 + 'px'}\">\n\t<li class=\"cell-list__item\"\n\t\tng-repeat=\"(idx, cell) in cf.cells track by cell.id\"\n\t\tng-style=\"{'left': cell.col*60 + 'px', 'top': cell.row*60 + 'px'}\"\n\t\tng-click=\"cf.cellCLick($event, cell, idx)\">\n\n\t\t<dr-cell type=\"{{cell.type}}\" state=\"{{cell.state}}\"></dr-cell>\n\n\t</li>\n</ul>")}]),function(){function t(t,e,l,i,r,n,a){this.$scope=t,this.$http=e,this.$state=l,this.drFieldService=a,this.points=a.points,this.drFiledFactory=n,this.cellState="square",this.init()}angular.module("app").controller("mainCtrl",t),t.prototype.init=function(){},t.prototype.newGame=function(t,e){t.preventDefault(),t.stopPropagation(),this.drFiledFactory.size=e,this.drFieldService.createNewArr(e),this.drFieldService.reset()},t.$inject=["$scope","$http","$state","$stateParams","$timeout","drFiledFactory","drFieldService"]}();var _createClass=function(){function t(t,e){for(var l=0;l<e.length;l++){var i=e[l];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,l,i){return l&&t(e.prototype,l),i&&t(e,i),e}}();!function(){angular.module("app").directive("drCell",["$templateCache",function(e){function l(t,e,l,i){}return{link:l,restrict:"AEC",scope:{},template:e.get("drCell/drCell.html"),controller:t,controllerAs:"c",bindToController:{type:"@?",state:"@?"}}}]);var t=function(){function t(e,l){_classCallCheck(this,t)}return _createClass(t,[{key:"returnCellClass",value:function(){var t="cell_type-"+(this.type||"square"),e="cell_state-"+(this.state||"default");return[t,e]}}]),t}();t.$inject=["$scope","$timeout"]}();var _createClass=function(){function t(t,e){for(var l=0;l<e.length;l++){var i=e[l];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,l,i){return l&&t(e.prototype,l),i&&t(e,i),e}}();!function(){angular.module("app").directive("drField",["$templateCache",function(e){function l(t,e,l,i){}return{link:l,restrict:"AEC",scope:{},template:e.get("drField/drField.html"),controller:t,controllerAs:"cf",bindToController:{cellClick:"=?",size:"=?",ctx:"=?"}}}]);var t=function(){function t(e,l,i,r){_classCallCheck(this,t),this.drFieldService=e,this.drFiledFactory=l,this.size&&(this.drFiledFactory.size=this.size),this.$scope=i,this.$timeout=r,this.init()}return _createClass(t,[{key:"init",value:function(){this.cells=this.drFieldService.createNewArr(this.size)}},{key:"cellCLick",value:function(t,e,l){if(t.preventDefault(),t.stopPropagation(),"default"===e.state){for(var i=0;i<this.cells.length;i+=1)this.cells[i].state="default";this.activeCell=e,this.activeCell.state="active",this.activeCellIdx=l,this.drFieldService.markClosestCell(l,"passive")}else if("passive"===e.state){this.drFieldService.replaceElements(this.activeCellIdx,l);for(var r=0;r<this.cells.length;r+=1)this.cells[r].state="default";this.$timeout(function(){},200)}else"active"===e.state&&(e.state="default",this.activeCell=void 0,this.activeCellIdx=void 0,this.drFieldService.markClosestCell(l,"default"))}}]),t}();t.$inject=["drFieldService","drFiledFactory","$scope","$timeout"]}(),function(){angular.module("app").service("drFieldService",["drFiledFactory","$timeout",function(t,e){function l(t){var e=Math.floor(Math.random()*t.length);return t[e]}function i(e){for(var i=angular.copy(t.types),r=0;r<e.length;r+=1)for(var n=0;n<i.length;n+=1)e[r]===i[n]&&i.splice(n,1);return l(i)}function r(){for(var t=0;t<v.length;t+=1)v[t].col=t%d.size,v[t].row=Math.floor(t/d.size)}function n(e){var r=a(e),n=r.length?i(r):l(t.types);return n}function a(t){var e=d.size,l=[],i=v.length%e;i>1&&v[v.length-2].type===v[v.length-1].type&&l.push(v[v.length-1].type);var r=Math.floor(v.length/e);return r>1&&v[v.length-e].type===v[v.length-2*e].type&&l.push(v[v.length-e].type),t-Math.floor(t/e)*e>1&&v[t-1]&&v[t-2]&&v[t-1].type===v[t-2].type&&l.push(v[t-1].type),Math.ceil(t/e)*e-t>1&&v[t+1]&&v[t+2]&&v[t+1].type===v[t+2].type&&l.push(v[t+1].type),Math.ceil(t/e)>2&&v[t-e]&&v[t-2*e]&&v[t-e].type===v[t-2*e].type&&l.push(v[t-e].type),e-Math.ceil(t/e)>2&&v[t+e]&&v[t+2*e]&&v[t+e].type===v[t+2*e].type&&l.push(v[t+e].type),t-Math.floor(t/e)*e>0&&Math.ceil(t/e)*e-t>0&&v[t-1]&&v[t+1]&&v[t-1].type===v[t+1].type&&l.push(v[t-1].type),Math.ceil(t/e)>1&&e-Math.ceil(t/e)>1&&v[t-e]&&v[t+e]&&v[t-e].type===v[t+e].type&&l.push(v[t-e].type),l}function s(t){for(var e=d.size,l=0;l<v.length;l+=e){for(var i=[l],r=v[l].type,n=1;n<e;n+=1)if("empty"!==v[l+n].type&&r===v[l+n].type)i.push(l+n);else{if(i.length>2)break;i.length=0,i.push(l+n),r=v[l+n].type}i.length>2&&t.push({length:i.length,type:r,idxArr:angular.copy(i)}),i.length=0}}function o(t){for(var e=d.size,l=0;l<e;l+=1){for(var i=[l],r=v[l].type,n=1;n<e;n+=1)if("empty"!==v[l+n*e].type&&r===v[l+n*e].type)i.push(l+n*e);else{if(i.length>2)break;i.length=0,i.push(l+n*e),r=v[l+n*e].type}i.length>2&&t.push({length:i.length,type:r,idxArr:angular.copy(i)}),i.length=0}}function c(){for(var t=0;t<v.length;t+=1)"empty"===v[t].type&&(v[t].type=n(t))}function p(){var t=[];return s(t),o(t),!!t.length&&(u(t),d.deleteElements(t),d.moveTopEl(),v.sort(f),void p())}function u(e){d.points.lastDel.length=0;for(var l=0;l<e.length;l+=1){var i=e[l].type,r=t.pointsMap[i]*e[l].length;d.points.lastPoints=r,d.points.allPoints+=r,d.points.lastDel.push(e[l].length+" "+i)}}function h(e,l){for(var i=t.size,r=Math.floor(e/i),n=0,a=e;n<l;n+=1)v[a].row-=r,a+=i;for(var s=0,o=e;s<r;s+=1)o-=i,v[o].row+=l}function f(t,e){return t.row!==e.row?t.row-e.row:t.row===e.row?t.col-e.col:void 0}var d=this;this.matrixModel=[];var v=this.matrixModel;this.points={lastDel:[],lastPoints:0,allPoints:0},this.reset=function(){this.points.lastDel.length=0,this.points.lastPoints=0,this.points.allPoints=0},this.createNewArr=function(e){v.length=0,this.size=e||t.size;for(var l=0;l<e*e;l++){var i=n();v.push({id:l,type:i,state:"default"})}return r(),v},this.markClosestCell=function(t,e){var l=d.size;v[t-l]&&(v[t-l].state=e),v[t+l]&&(v[t+l].state=e),v[t-1]&&(v[t-1].state=e),v[t+1]&&(v[t+1].state=e)},this.replaceElements=function(t,e){var l={col1:v[t].col,row1:v[t].row,col2:v[e].col,row2:v[e].row};v[t].col=l.col2,v[t].row=l.row2,v[e].col=l.col1,v[e].row=l.row1,v.sort(f),p(),c(),p()},this.deleteElements=function(t){for(var e=0;e<t.length;e+=1){for(var l=t[e],i=0;i<l.idxArr.length;i+=1)v[l.idxArr[i]].type="empty";for(var r=0;r<v.length;r+=1)v[r].state="default"}},this.moveTopEl=function(){for(var e,l=t.size,i=0,r=0,n=0;r<v.length;r+=1){r>0&&r%l===0&&(e=void 0,n=0,i++);var a=r%l*l+i;"empty"===v[a].type&&(e||(e=a),n++),r>0&&(r+1)%l===0&&n>0&&h(e,n)}}}])}(),function(){angular.module("app").factory("drFiledFactory",function(){var t=["square","circle","triangle"],e=["default","active","passive","note"],l={square:10,triangle:20,circle:30},i=9;return{types:t,states:e,size:i,pointsMap:l}})}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,

"use strict";function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}!function(){angular.module("app",["ngAnimate","ngMaterial","ngMessages","ui.router"])}(),angular.module("app").run(["$templateCache",function(e){e.put("drCell/drCell.html",'<div class="cell" ng-class="c.returnCellClass()">\n\t<div class="cell__fig"></div>\n</div>\n'),e.put("drField/drField.html",'<ul class="cell-list">\n\t<li class="cell-list__item"\n\t\tng-repeat="(idx, cell) in cf.cells track by cell.id"\n\t\tng-style="{\'left\': cell.col*60 + \'px\', \'top\': cell.row*60 + \'px\'}"\n\t\tng-click="cf.cellCLick($event, cell, idx)">\n\n\t\t<dr-cell type="{{cell.type}}" state="{{cell.state}}"></dr-cell>\n\n\t</li>\n</ul>')}]),function(){function e(e,t,l,r,n){this.$scope=e,this.$http=t,this.$state=l,this.cellState="square",this.init()}angular.module("app").controller("mainCtrl",e),e.prototype.init=function(){},e.$inject=["$scope","$http","$state","$stateParams","$timeout"]}();var _createClass=function(){function e(e,t){for(var l=0;l<t.length;l++){var r=t[l];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,l,r){return l&&e(t.prototype,l),r&&e(t,r),t}}();!function(){angular.module("app").directive("drCell",["$templateCache",function(t){function l(e,t,l,r){}return{link:l,restrict:"AEC",scope:{},template:t.get("drCell/drCell.html"),controller:e,controllerAs:"c",bindToController:{type:"@?",state:"@?"}}}]);var e=function(){function e(t,l){_classCallCheck(this,e)}return _createClass(e,[{key:"returnCellClass",value:function(){var e="cell_type-"+(this.type||"square"),t="cell_state-"+(this.state||"default");return[e,t]}}]),e}();e.$inject=["$scope","$timeout"]}();var _createClass=function(){function e(e,t){for(var l=0;l<t.length;l++){var r=t[l];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,l,r){return l&&e(t.prototype,l),r&&e(t,r),t}}();!function(){angular.module("app").directive("drField",["$templateCache",function(t){function l(e,t,l,r){}return{link:l,restrict:"AEC",scope:{},template:t.get("drField/drField.html"),controller:e,controllerAs:"cf",bindToController:{cellClick:"=?",size:"=?",ctx:"=?"}}}]);var e=function(){function e(t,l,r,n){_classCallCheck(this,e),this.drFieldService=t,this.drFiledFactory=l,this.size&&(this.drFiledFactory.size=this.size),this.$scope=r,this.$timeout=n,this.init()}return _createClass(e,[{key:"init",value:function(){this.cells=this.drFieldService.createNewArr(this.size)}},{key:"cellCLick",value:function(e,t,l){if(e.preventDefault(),e.stopPropagation(),"default"===t.state){for(var r=0;r<this.cells.length;r+=1)this.cells[r].state="default";this.activeCell=t,this.activeCell.state="active",this.activeCellIdx=l,this.drFieldService.markClosestCell(l,"passive")}else if("passive"===t.state){this.drFieldService.replaceElements(this.activeCellIdx,l);for(var n=0;n<this.cells.length;n+=1)this.cells[n].state="default";this.$timeout(function(){},200)}else"active"===t.state&&(t.state="default",this.activeCell=void 0,this.activeCellIdx=void 0,this.drFieldService.markClosestCell(l,"default"))}}]),e}();e.$inject=["drFieldService","drFiledFactory","$scope","$timeout"]}(),function(){angular.module("app").service("drFieldService",["drFiledFactory","$timeout",function(e,t){function l(e){var t=Math.floor(Math.random()*e.length);return e[t]}function r(t){for(var r=angular.copy(e.types),n=0;n<t.length;n+=1)for(var i=0;i<r.length;i+=1)t[n]===r[i]&&r.splice(i,1);return l(r)}function n(){for(var e=0;e<d.length;e+=1)d[e].col=e%p.size,d[e].row=Math.floor(e/p.size)}function i(t){var n=l(e.types),i=[];a(i),o(i),i.length&&(n=r(i)),d.push({id:t,type:n,state:"default"})}function a(e){var t=p.size,l=d.length%t;l>1&&d[d.length-2].type===d[d.length-1].type&&e.push(d[d.length-1].type)}function o(e){var t=p.size,l=Math.floor(d.length/t);l>1&&d[d.length-t].type===d[d.length-2*t].type&&e.push(d[d.length-t].type)}function s(e){for(var t=p.size,l=0;l<d.length;l+=t){for(var r=[l],n=d[l].type,i=1;i<t;i+=1)if("empty"!==d[l+i].type&&n===d[l+i].type)r.push(l+i);else{if(r.length>2)break;r.length=0,r.push(l+i),n=d[l+i].type}r.length>2&&e.push({length:r.length,type:n,idxArr:angular.copy(r)}),r.length=0}}function c(e){for(var t=p.size,l=0;l<t;l+=1){for(var r=[l],n=d[l].type,i=1;i<t;i+=1)if("empty"!==d[l+i*t].type&&n===d[l+i*t].type)r.push(l+i*t);else{if(r.length>2)break;r.length=0,r.push(l+i*t),n=d[l+i*t].type}r.length>2&&e.push({length:r.length,type:n,idxArr:angular.copy(r)}),r.length=0}}function u(){}function u(){var e=[];return s(e),c(e),!!e.length&&(p.deleteElements(e),p.moveTopEl(),d.sort(f),void u())}function h(t,l){for(var r=e.size,n=Math.floor(t/r),i=0,a=t;i<l;i+=1)d[a].row-=n,a+=r;for(var o=0,s=t;o<n;o+=1)s-=r,d[s].row+=l}function f(e,t){return e.row!==t.row?e.row-t.row:e.row===t.row?e.col-t.col:void 0}var p=this;this.matrixModel=[];var d=this.matrixModel;this.createNewArr=function(t){d.length=0,this.size=t||e.size;for(var l=0;l<t*t;l++)i(l);return n(),d},this.markClosestCell=function(e,t){var l=p.size;d[e-l]&&(d[e-l].state=t),d[e+l]&&(d[e+l].state=t),d[e-1]&&(d[e-1].state=t),d[e+1]&&(d[e+1].state=t)},this.replaceElements=function(e,t){var l={col1:d[e].col,row1:d[e].row,col2:d[t].col,row2:d[t].row};d[e].col=l.col2,d[e].row=l.row2,d[t].col=l.col1,d[t].row=l.row1,d.sort(f),u()},this.deleteElements=function(e){for(var t=0;t<e.length;t+=1){for(var l=e[t],r=0;r<l.idxArr.length;r+=1)d[l.idxArr[r]].type="empty";for(var n=0;n<d.length;n+=1)d[n].state="default"}},this.moveTopEl=function(){for(var t,l=e.size,r=0,n=0,i=0;n<d.length;n+=1){n>0&&n%l===0&&(t=void 0,i=0,r++);var a=n%l*l+r;"empty"===d[a].type&&(t||(t=a),i++),n>0&&(n+1)%l===0&&i>0&&h(t,i)}}}])}(),function(){angular.module("app").factory("drFiledFactory",function(){var e=["square","circle","triangle"],t=["default","active","passive","note"],l=9;return{types:e,states:t,size:l}})}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,

"use strict";function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}!function(){angular.module("app",["ngAnimate","ngMaterial","ngMessages","ui.router"])}(),angular.module("app").run(["$templateCache",function(e){e.put("drCell/drCell.html",'<div class="cell" ng-class="c.returnCellClass()">\n\t<div class="cell__fig"></div>\n</div>\n'),e.put("drField/drField.html",'<ul class="cell-list">\n\t<li class="cell-list__item"\n\t\tng-repeat="(idx, cell) in cf.cells"\n\t\tng-style="{\'left\': cell.col*60 + \'px\', \'top\': cell.row*60 + \'px\'}"\n\t\tng-click="cf.cellCLick($event, cell, idx)">\n\n\t\t<dr-cell type="{{cell.type}}" state="{{cell.state}}"></dr-cell>\n\n\t</li>\n</ul>')}]),function(){function e(e,t,l,n,i){this.$scope=e,this.$http=t,this.$state=l,this.cellState="square",this.init()}angular.module("app").controller("mainCtrl",e),e.prototype.init=function(){},e.$inject=["$scope","$http","$state","$stateParams","$timeout"]}();var _createClass=function(){function e(e,t){for(var l=0;l<t.length;l++){var n=t[l];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,l,n){return l&&e(t.prototype,l),n&&e(t,n),t}}();!function(){angular.module("app").directive("drCell",["$templateCache",function(t){function l(e,t,l,n){}return{link:l,restrict:"AEC",scope:{},template:t.get("drCell/drCell.html"),controller:e,controllerAs:"c",bindToController:{type:"@?",state:"@?"}}}]);var e=function(){function e(t,l){_classCallCheck(this,e)}return _createClass(e,[{key:"returnCellClass",value:function(){var e="cell_type-"+(this.type||"square"),t="cell_state-"+(this.state||"default");return[e,t]}}]),e}();e.$inject=["$scope","$timeout"]}();var _createClass=function(){function e(e,t){for(var l=0;l<t.length;l++){var n=t[l];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,l,n){return l&&e(t.prototype,l),n&&e(t,n),t}}();!function(){angular.module("app").directive("drField",["$templateCache",function(t){function l(e,t,l,n){}return{link:l,restrict:"AEC",scope:{},template:t.get("drField/drField.html"),controller:e,controllerAs:"cf",bindToController:{cellClick:"=?",size:"=?",ctx:"=?"}}}]);var e=function(){function e(t){_classCallCheck(this,e),this.drFieldService=t,this.init()}return _createClass(e,[{key:"init",value:function(){this.cells=this.drFieldService.createNewArr(this.size)}},{key:"cellCLick",value:function(e,t,l){e.preventDefault(),e.stopPropagation(),this.activeCell||(this.activeCell=t);var n=void 0,i=void 0;if("passive"===t.state){var r={col:this.activeCell.col,row:this.activeCell.row},a={col:t.col,row:t.row};return this.activeCell.col=a.col,this.activeCell.row=a.row,t.col=r.col,void(t.row=r.row)}if(this.activeCell==this.cells[l])this.activeCell.state="active"===this.activeCell.state?"default":"active",i="active"===this.activeCell.state;else{for(var c=0;c<this.cells.length;c+=1)this.cells[c].state="default";t.state="active",i="active"===t.state}n=i?"passive":"default",this.drFieldService.markClosestCell(this.cells,this.size,l,n),this.activeCell=t}}]),e}();e.$inject=["drFieldService"]}(),function(){angular.module("app").service("drFieldService",["drFiledFactory",function(e){function t(e){var t=Math.floor(Math.random()*e.length);return e[t]}function l(l){for(var n=angular.copy(e.types),i=0;i<n.length;i+=1)n[i]===l&&n.splice(i,1);return t(n)}function n(e,t){for(var l=0;l<e.length;l+=1)e[l].col=l%t,e[l].row=Math.floor(l/t)}function i(n,i){var r=t(e.types);n[n.length-1]&&n[n.length-2]&&n[n.length-1].type===r&&n[n.length-2].type===r?r=l(r):n[n.length-i]&&n[n.length-2*i]&&n[n.length-i].type===r&&n[n.length-2*i].type===r&&(r=l(r)),n.push({type:r,state:"default"})}this.createNewArr=function(e){for(var t=[],l=0;l<e*e;l++)i(t,e);return n(t,e),t},this.markClosestCell=function(e,t,l,n){e[l-t]&&(e[l-t].state=n),e[l+t]&&(e[l+t].state=n),e[l-1]&&(e[l-1].state=n),e[l+1]&&(e[l+1].state=n)}}])}(),function(){angular.module("app").factory("drFiledFactory",function(){var e=["square","circle","triangle"],t=["default","active","passive","note"];return{types:e,states:t}})}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,

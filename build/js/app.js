"use strict";function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}!function(){angular.module("app",["ngAnimate","ngMaterial","ngMessages","ui.router"])}(),angular.module("app").run(["$templateCache",function(t){t.put("drCell/drCell.html",'<div class="cell" ng-class="c.returnCellClass()">\n\t<div class="cell__fig"></div>\n</div>\n'),t.put("drField/drField.html","<ul class=\"cell-list\"ng-style=\"{'width': cf.size*60 + 'px', 'height': cf.size*60 + 'px'}\">\n\t<li class=\"cell-list__item\"\n\t\tng-repeat=\"(idx, cell) in cf.cells track by cell.id\"\n\t\tng-style=\"{'left': cell.col*60 + 'px', 'top': cell.row*60 + 'px'}\"\n\t\tng-click=\"cf.cellCLick($event, cell, idx)\">\n\n\t\t<dr-cell type=\"{{cell.type}}\" state=\"{{cell.state}}\"></dr-cell>\n\n\t</li>\n</ul>")}]),function(){function t(t,e,l,r,i,n,a){this.$scope=t,this.$http=e,this.$state=l,this.drFieldService=a,this.points=a.points,this.drFiledFactory=n,this.cellState="square",this.init()}angular.module("app").controller("mainCtrl",t),t.prototype.init=function(){},t.prototype.newGame=function(t,e){t.preventDefault(),t.stopPropagation(),this.drFiledFactory.size=e,this.drFieldService.createNewArr(e),this.drFieldService.reset()},t.$inject=["$scope","$http","$state","$stateParams","$timeout","drFiledFactory","drFieldService"]}();var _createClass=function(){function t(t,e){for(var l=0;l<e.length;l++){var r=e[l];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,l,r){return l&&t(e.prototype,l),r&&t(e,r),e}}();!function(){angular.module("app").directive("drCell",["$templateCache",function(e){function l(t,e,l,r){}return{link:l,restrict:"AEC",scope:{},template:e.get("drCell/drCell.html"),controller:t,controllerAs:"c",bindToController:{type:"@?",state:"@?"}}}]);var t=function(){function t(e,l){_classCallCheck(this,t)}return _createClass(t,[{key:"returnCellClass",value:function(){var t="cell_type-"+(this.type||"square"),e="cell_state-"+(this.state||"default");return[t,e]}}]),t}();t.$inject=["$scope","$timeout"]}();var _createClass=function(){function t(t,e){for(var l=0;l<e.length;l++){var r=e[l];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,l,r){return l&&t(e.prototype,l),r&&t(e,r),e}}();!function(){angular.module("app").directive("drField",["$templateCache",function(e){function l(t,e,l,r){}return{link:l,restrict:"AEC",scope:{},template:e.get("drField/drField.html"),controller:t,controllerAs:"cf",bindToController:{cellClick:"=?",size:"=?",ctx:"=?"}}}]);var t=function(){function t(e,l,r,i){_classCallCheck(this,t),this.drFieldService=e,this.drFiledFactory=l,this.size&&(this.drFiledFactory.size=this.size),this.$scope=r,this.$timeout=i,this.init()}return _createClass(t,[{key:"init",value:function(){this.cells=this.drFieldService.createNewArr(this.size)}},{key:"cellCLick",value:function(t,e,l){if(t.preventDefault(),t.stopPropagation(),"default"===e.state){for(var r=0;r<this.cells.length;r+=1)this.cells[r].state="default";this.activeCell=e,this.activeCell.state="active",this.activeCellIdx=l,this.drFieldService.markClosestCell(l,"passive")}else"passive"===e.state?(this.drFieldService.replaceElements(this.activeCellIdx,l),this.$timeout(function(){},200)):"active"===e.state&&(e.state="default",this.activeCell=void 0,this.activeCellIdx=void 0,this.drFieldService.markClosestCell(l,"default"))}}]),t}();t.$inject=["drFieldService","drFiledFactory","$scope","$timeout"]}(),function(){angular.module("app").service("drFieldService",["drFiledFactory","$timeout",function(t,e){function l(t){var e=Math.floor(Math.random()*t.length);return t[e]}function r(e){for(var r=angular.copy(t.types),i=0;i<e.length;i+=1)for(var n=0;n<r.length;n+=1)e[i]===r[n]&&r.splice(n,1);return l(r)}function i(){for(var t=0;t<y.length;t+=1)y[t].col=t%v.size,y[t].row=Math.floor(t/v.size)}function n(e){var i=a(e),n=i.length?r(i):l(t.types);return n}function a(t){var e=v.size,l=[],r=y.length%e;r>1&&y[y.length-2].type===y[y.length-1].type&&l.push(y[y.length-1].type);var i=Math.floor(y.length/e);return i>1&&y[y.length-e].type===y[y.length-2*e].type&&l.push(y[y.length-e].type),t-Math.floor(t/e)*e>1&&y[t-1]&&y[t-2]&&y[t-1].type===y[t-2].type&&l.push(y[t-1].type),Math.ceil(t/e)*e-t>1&&y[t+1]&&y[t+2]&&y[t+1].type===y[t+2].type&&l.push(y[t+1].type),Math.ceil(t/e)>2&&y[t-e]&&y[t-2*e]&&y[t-e].type===y[t-2*e].type&&l.push(y[t-e].type),e-Math.ceil(t/e)>2&&y[t+e]&&y[t+2*e]&&y[t+e].type===y[t+2*e].type&&l.push(y[t+e].type),t-Math.floor(t/e)*e>0&&Math.ceil(t/e)*e-t>0&&y[t-1]&&y[t+1]&&y[t-1].type===y[t+1].type&&l.push(y[t-1].type),Math.ceil(t/e)>1&&e-Math.ceil(t/e)>1&&y[t-e]&&y[t+e]&&y[t-e].type===y[t+e].type&&l.push(y[t-e].type),l}function s(t){for(var e=v.size,l=0;l<y.length;l+=e){for(var r=[l],i=y[l].type,n=1;n<e;n+=1)if("empty"!==y[l+n].type&&i===y[l+n].type)r.push(l+n);else{if(r.length>2)break;r.length=0,r.push(l+n),i=y[l+n].type}r.length>2&&t.push({length:r.length,type:i,idxArr:angular.copy(r)}),r.length=0}}function o(t){for(var e=v.size,l=0;l<e;l+=1){for(var r=[l],i=y[l].type,n=1;n<e;n+=1)if("empty"!==y[l+n*e].type&&i===y[l+n*e].type)r.push(l+n*e);else{if(r.length>2)break;r.length=0,r.push(l+n*e),i=y[l+n*e].type}r.length>2&&t.push({length:r.length,type:i,idxArr:angular.copy(r)}),r.length=0}}function c(){for(var t=0;t<y.length;t+=1)"empty"===y[t].type&&(y[t].type=n(t))}function p(){var t=[];s(t),o(t);for(var l=0;l<y.length;l+=1)y[l].state="default";if(!t.length){for(var r=!1,i=0;i<y.length;i+=1)if("empty"===y[i].type){r=!0;break}return r&&(c(),p()),!1}e(function(){u(t),h(t),e(function(){v.deleteElements(t),v.moveTopEl(),y.sort(d),p()},500)},250)}function u(t){for(var e=0;e<t.length;e+=1)for(var l=t[e],r=0;r<l.idxArr.length;r+=1)y[l.idxArr[r]].state="delete"}function h(e){v.points.lastDel.length=0;for(var l=0;l<e.length;l+=1){var r=e[l].type,i=t.pointsMap[r]*e[l].length;v.points.lastPoints=i,v.points.allPoints+=i,v.points.lastDel.push(e[l].length+" "+r)}}function f(e,l){for(var r=t.size,i=Math.floor(e/r),n=0,a=e;n<l;n+=1)y[a].row-=i,a+=r;for(var s=0,o=e;s<i;s+=1)o-=r,y[o].row+=l}function d(t,e){return t.row!==e.row?t.row-e.row:t.row===e.row?t.col-e.col:void 0}var v=this;this.matrixModel=[];var y=this.matrixModel;this.points={lastDel:[],lastPoints:0,allPoints:0},this.reset=function(){this.points.lastDel.length=0,this.points.lastPoints=0,this.points.allPoints=0},this.createNewArr=function(e){y.length=0,this.size=e||t.size;for(var l=0;l<e*e;l++){var r=n();y.push({id:l,type:r,state:"default"})}return i(),y},this.markClosestCell=function(t,e){var l=v.size;y[t-l]&&(y[t-l].state=e),y[t+l]&&(y[t+l].state=e),y[t-1]&&(y[t-1].state=e),y[t+1]&&(y[t+1].state=e)},this.replaceElements=function(t,e){var l={col1:y[t].col,row1:y[t].row,col2:y[e].col,row2:y[e].row};y[t].col=l.col2,y[t].row=l.row2,y[e].col=l.col1,y[e].row=l.row1,y.sort(d),p()},this.deleteElements=function(t){for(var e=0;e<t.length;e+=1){for(var l=t[e],r=0;r<l.idxArr.length;r+=1)y[l.idxArr[r]].type="empty";for(var i=0;i<y.length;i+=1)y[i].state="default"}},this.moveTopEl=function(){for(var e,l=t.size,r=0,i=0,n=0;i<y.length;i+=1){i>0&&i%l===0&&(e=void 0,n=0,r++);var a=i%l*l+r;"empty"===y[a].type&&(e||(e=a),n++),i>0&&(i+1)%l===0&&n>0&&f(e,n)}}}])}(),function(){angular.module("app").factory("drFiledFactory",function(){var t=["square","circle","triangle"],e=["default","active","passive","note"],l={square:10,triangle:20,circle:30},r=5;return{types:t,states:e,size:r,pointsMap:l}})}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,

"use strict";function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}!function(){angular.module("app",["ngAnimate","ngMaterial","ngMessages","ui.router"])}(),angular.module("app").run(["$templateCache",function(e){e.put("drCell/drCell.html",'<div class="cell" ng-class="c.returnCellClass()">\n\t<div class="cell__fig"></div>\n</div>\n'),e.put("drField/drField.html",'<ul class="cell-list">\n\t<li class="cell-list__item"\n\t\tng-repeat="(idx, cell) in cf.cells track by cell.id"\n\t\tng-style="{\'left\': cell.col*60 + \'px\', \'top\': cell.row*60 + \'px\'}"\n\t\tng-click="cf.cellCLick($event, cell, idx)">\n\n\t\t<dr-cell type="{{cell.type}}" state="{{cell.state}}"></dr-cell>\n\n\t</li>\n</ul>')}]),function(){function e(e,t,l,r,n){this.$scope=e,this.$http=t,this.$state=l,this.cellState="square",this.init()}angular.module("app").controller("mainCtrl",e),e.prototype.init=function(){},e.$inject=["$scope","$http","$state","$stateParams","$timeout"]}();var _createClass=function(){function e(e,t){for(var l=0;l<t.length;l++){var r=t[l];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,l,r){return l&&e(t.prototype,l),r&&e(t,r),t}}();!function(){angular.module("app").directive("drCell",["$templateCache",function(t){function l(e,t,l,r){}return{link:l,restrict:"AEC",scope:{},template:t.get("drCell/drCell.html"),controller:e,controllerAs:"c",bindToController:{type:"@?",state:"@?"}}}]);var e=function(){function e(t,l){_classCallCheck(this,e)}return _createClass(e,[{key:"returnCellClass",value:function(){var e="cell_type-"+(this.type||"square"),t="cell_state-"+(this.state||"default");return[e,t]}}]),e}();e.$inject=["$scope","$timeout"]}();var _createClass=function(){function e(e,t){for(var l=0;l<t.length;l++){var r=t[l];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,l,r){return l&&e(t.prototype,l),r&&e(t,r),t}}();!function(){angular.module("app").directive("drField",["$templateCache",function(t){function l(e,t,l,r){}return{link:l,restrict:"AEC",scope:{},template:t.get("drField/drField.html"),controller:e,controllerAs:"cf",bindToController:{cellClick:"=?",size:"=?",ctx:"=?"}}}]);var e=function(){function e(t,l,r){_classCallCheck(this,e),this.drFieldService=t,this.size&&(this.drFieldService.size=this.size),this.$scope=l,this.$timeout=r,this.init()}return _createClass(e,[{key:"init",value:function(){this.cells=this.drFieldService.createNewArr(this.size)}},{key:"cellCLick",value:function(e,t,l){if(e.preventDefault(),e.stopPropagation(),"default"===t.state){for(var r=0;r<this.cells.length;r+=1)this.cells[r].state="default";this.activeCell=t,this.activeCell.state="active",this.activeCellIdx=l,this.drFieldService.markClosestCell(this.cells,this.size,l,"passive")}else"passive"===t.state?(this.drFieldService.replaceElements(this.cells,this.activeCellIdx,l),this.$timeout(function(){},200)):"active"===t.state&&(t.state="default",this.activeCell=void 0,this.activeCellIdx=void 0,this.drFieldService.markClosestCell(this.cells,this.size,l,"default"))}}]),e}();e.$inject=["drFieldService","$scope","$timeout"]}(),function(){angular.module("app").service("drFieldService",["drFiledFactory","$timeout",function(e,t){function l(e){var t=Math.floor(Math.random()*e.length);return e[t]}function r(t){for(var r=angular.copy(e.types),n=0;n<t.length;n+=1)for(var i=0;i<r.length;i+=1)t[n]===r[i]&&r.splice(i,1);return l(r)}function n(e,t){for(var l=0;l<e.length;l+=1)e[l].col=l%t,e[l].row=Math.floor(l/t)}function i(t,n,i){var s=l(e.types),o=[];a(t,n,o),c(t,n,o),o.length&&(s=r(o)),t.push({id:i,type:s,state:"default"})}function a(e,t,l){var r=e.length%t;r>1&&e[e.length-2].type===e[e.length-1].type&&l.push(e[e.length-1].type)}function c(e,t,l){var r=Math.floor(e.length/t);r>1&&e[e.length-t].type===e[e.length-2*t].type&&l.push(e[e.length-t].type)}function s(e,t,l){for(var r=0;r<e.length;r+=1){for(var n=r%l,i=1,a=e[r].type,c=1;c<l-n&&e[r+c].type===a;c+=1)i++;if(i>2){for(var s=[],o=0;o<i;o+=1)s.push(r+o);t.push({length:i,type:a,idxArr:s}),r+=i-1,i=0}else i=0}}function o(e,t,l){for(var r=0,n=0;n<e.length;n+=1){n>0&&n%l===0&&r++;for(var i=n%l*l+r,a=1,c=e[i].type,s=1;s<l-i/l&&e[i+l*s].type===c;s+=1)a++;if(a>2){for(var o=[],u=0;u<a;u+=1)o.push(i+l*u);t.push({length:a,type:c,idxArr:o}),n+=a-1,a=0}else a=0}}this.createNewArr=function(e){for(var t=[],l=0;l<e*e;l++)i(t,e,l);return n(t,e),t},this.markClosestCell=function(e,t,l,r){e[l-t]&&(e[l-t].state=r),e[l+t]&&(e[l+t].state=r),e[l-1]&&(e[l-1].state=r),e[l+1]&&(e[l+1].state=r)},this.replaceElements=function(e,l,r){var n=this,i={col:e[l].col,row:e[l].row,type:e[l].type,state:e[l].state},a={col:e[r].col,row:e[r].row,type:e[r].type,state:e[r].state};e[l].col=a.col,e[l].row=a.row,e[r].col=i.col,e[r].row=i.row,t(function(){var t=angular.copy(e[l]);e[l]=e[r],e[r]=t;var i=n.checkRowElements(e);n.deleteElements(e,i)},200)},this.checkRowElements=function(t){var l=[],r=e.size;return s(t,l,r),o(t,l,r),l},this.deleteElements=function(e,t){for(var l=0;l<t.length;l+=1){for(var r=t[l],n=0;n<r.idxArr.length;n+=1){var i=r.idxArr[n];e[i].type="empty"}for(var a=0;a<e.length;a+=1)e[a].state="default"}}}])}(),function(){angular.module("app").factory("drFiledFactory",function(){var e=["square","circle","triangle"],t=["default","active","passive","note"],l=9;return{types:e,states:t,size:l}})}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,

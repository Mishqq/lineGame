/* http://meyerweb.com/eric/tools/css/reset/
   v2.0 | 20110126
   License: none (public domain) */
html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed,
figure, figcaption, footer, header, hgroup,
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
  margin: 0;
  padding: 0;
  border: 0;
  font-size: 100%;
  font: inherit;
  vertical-align: baseline;
  box-sizing: border-box; }

/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure,
footer, header, hgroup, menu, nav, section {
  display: block; }

body {
  line-height: 1; }

ol, ul {
  list-style: none; }

blockquote, q {
  quotes: none; }

blockquote:before, blockquote:after,
q:before, q:after {
  content: '';
  content: none; }

table {
  border-collapse: collapse;
  border-spacing: 0; }

@font-face {
  font-family: "Nexa-Bold";
  font-style: normal;
  font-weight: bold;
  src: url("../fonts/Nexa-Bold/Nexa-Bold.eot?") format("eot"), url("../fonts/Nexa-Bold/Nexa-Bold.otf") format("otf"), url("../fonts/Nexa-Bold/Nexa-Bold.woff") format("woff"), url("../fonts/Nexa-Bold/Nexa-Bold.ttf") format("truetype"), url("../fonts/Nexa-Bold/Nexa-Bold.svg#Nexa-Bold") format("svg"); }

@font-face {
  font-family: "NexaSlab-xBold";
  font-style: normal;
  font-weight: normal;
  src: url("../fonts/NexaSlab-xBold/NexaSlab-xBold.eot?") format("eot"), url("../fonts/NexaSlab-xBold/NexaSlab-xBold.otf") format("otf"), url("../fonts/NexaSlab-xBold/NexaSlab-xBold.woff") format("woff"), url("../fonts/NexaSlab-xBold/NexaSlab-xBold.ttf") format("truetype"), url("../fonts/NexaSlab-xBold/NexaSlab-xBold.svg#NexaSlab-xBold") format("svg"); }

@font-face {
  font-family: "ProximaNova-Light";
  font-style: normal;
  font-weight: 300;
  src: url("../fonts/ProximaNova-Light/ProximaNova-Light.eot?") format("eot"), url("../fonts/ProximaNova-Light/ProximaNova-Light.otf") format("otf"), url("../fonts/ProximaNova-Light/ProximaNova-Light.woff") format("woff"), url("../fonts/ProximaNova-Light/ProximaNova-Light.ttf") format("truetype"), url("../fonts/ProximaNova-Light/ProximaNova-Light.svg#ProximaNova-Light") format("svg"); }

@font-face {
  font-family: "ProximaNova-Semibold";
  font-style: normal;
  font-weight: bold;
  src: url("../fonts/ProximaNova-Semibold/ProximaNova-Semibold.eot?") format("eot"), url("../fonts/ProximaNova-Semibold/ProximaNova-Semibold.otf") format("otf"), url("../fonts/ProximaNova-Semibold/ProximaNova-Semibold.woff") format("woff"), url("../fonts/ProximaNova-Semibold/ProximaNova-Semibold.ttf") format("truetype"), url("../fonts/ProximaNova-Semibold/ProximaNova-Semibold.svg#ProximaNova-Semibold") format("svg"); }

@font-face {
  font-family: "MyriadProBold";
  font-style: normal;
  font-weight: bold;
  src: url("../fonts/MyriadProBold/MyriadProBold.eot?") format("eot"), url("../fonts/MyriadProBold/MyriadProBold.otf") format("otf"), url("../fonts/MyriadProBold/MyriadProBold.woff") format("woff"), url("../fonts/MyriadProBold/MyriadProBold.ttf") format("truetype"), url("../fonts/MyriadProBold/MyriadProBold.svg#MyriadProBold") format("svg"); }

@font-face {
  font-family: "MyriadProBoldItalic";
  font-style: italic;
  font-weight: bold;
  src: url("../fonts/MyriadProBoldItalic/MyriadProBoldItalic.eot?") format("eot"), url("../fonts/MyriadProBoldItalic/MyriadProBoldItalic.otf") format("otf"), url("../fonts/MyriadProBoldItalic/MyriadProBoldItalic.woff") format("woff"), url("../fonts/MyriadProBoldItalic/MyriadProBoldItalic.ttf") format("truetype"), url("../fonts/MyriadProBoldItalic/MyriadProBoldItalic.svg#MyriadProBoldItalic") format("svg"); }

@font-face {
  font-family: "MyriadProItalic";
  font-style: italic;
  font-weight: normal;
  src: url("../fonts/MyriadProItalic/MyriadProItalic.eot?") format("eot"), url("../fonts/MyriadProItalic/MyriadProItalic.otf") format("otf"), url("../fonts/MyriadProItalic/MyriadProItalic.woff") format("woff"), url("../fonts/MyriadProItalic/MyriadProItalic.ttf") format("truetype"), url("../fonts/MyriadProItalic/MyriadProItalic.svg#MyriadProItalic") format("svg"); }

@font-face {
  font-family: "MyriadProRegular";
  font-style: normal;
  font-weight: normal;
  src: url("../fonts/MyriadProRegular/MyriadProRegular.eot?") format("eot"), url("../fonts/MyriadProRegular/MyriadProRegular.otf") format("otf"), url("../fonts/MyriadProRegular/MyriadProRegular.woff") format("woff"), url("../fonts/MyriadProRegular/MyriadProRegular.ttf") format("truetype"), url("../fonts/MyriadProRegular/MyriadProRegular.svg#MyriadProRegular") format("svg"); }

@font-face {
  font-family: "MyriadProSemiBold";
  font-style: normal;
  font-weight: 400;
  src: url("../fonts/MyriadProSemiBold/MyriadProSemiBold.eot?") format("eot"), url("../fonts/MyriadProSemiBold/MyriadProSemiBold.otf") format("otf"), url("../fonts/MyriadProSemiBold/MyriadProSemiBold.woff") format("woff"), url("../fonts/MyriadProSemiBold/MyriadProSemiBold.ttf") format("truetype"), url("../fonts/MyriadProSemiBold/MyriadProSemiBold.svg#MyriadProSemiBold") format("svg"); }

@font-face {
  font-family: "MyriadProSemiBoldItalic";
  font-style: italic;
  font-weight: 400;
  src: url("../fonts/MyriadProSemiBoldItalic/MyriadProSemiBoldItalic.eot?") format("eot"), url("../fonts/MyriadProSemiBoldItalic/MyriadProSemiBoldItalic.otf") format("otf"), url("../fonts/MyriadProSemiBoldItalic/MyriadProSemiBoldItalic.woff") format("woff"), url("../fonts/MyriadProSemiBoldItalic/MyriadProSemiBoldItalic.ttf") format("truetype"), url("../fonts/MyriadProSemiBoldItalic/MyriadProSemiBoldItalic.svg#MyriadProSemiBoldItalic") format("svg"); }

/*
  SASS variables are information about icon's compiled state, stored under its original file name

  .icon-home
    width: $icon-home-width

  The large array-like variables contain all information about a single icon
  $icon-home: x y offset_x offset_y width height total_width total_height image_path

  At the bottom of this section, we provide information about the spritesheet itself
  $spritesheet: width height image $spritesheet-sprites
  */
/*
  The provided mixins are intended to be used with the array-like variables

  .icon-home
    @include sprite-width($icon-home)

  .icon-email
    @include sprite($icon-email)

  Example usage in HTML:
    `display: block` sprite:
    <div class="icon-home"></div>

  To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class: */
/*
  The `sprites` mixin generates identical output to the CSS template
    but can be overridden inside of SASS

  @include sprites($spritesheet-sprites)
  */
/*
  SASS variables are information about icon's compiled state, stored under its original file name

  .icon-home
    width: $icon-home-width

  The large array-like variables contain all information about a single icon
  $icon-home: x y offset_x offset_y width height total_width total_height image_path

  At the bottom of this section, we provide information about the spritesheet itself
  $spritesheet: width height image $spritesheet-sprites
  */
/*
  The provided mixins are intended to be used with the array-like variables

  .icon-home
    @include sprite-width($icon-home)

  .icon-email
    @include sprite($icon-email)

  Example usage in HTML:
    `display: block` sprite:
    <div class="icon-home"></div>

  To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class: */
/*
  The `sprites` mixin generates identical output to the CSS template
    but can be overridden inside of SASS

  @include sprites($spritesheet-sprites)
  */
@-webkit-keyframes activeState {
  0% {
    background-color: aliceblue; }
  50% {
    background-color: lightblue; }
  100% {
    background-color: aliceblue; } }
@keyframes activeState {
  0% {
    background-color: aliceblue; }
  50% {
    background-color: lightblue; }
  100% {
    background-color: aliceblue; } }

@-webkit-keyframes passiveState {
  0% {
    background-color: aliceblue; }
  50% {
    background-color: rgba(173, 216, 230, 0.5); }
  100% {
    background-color: aliceblue; } }

@keyframes passiveState {
  0% {
    background-color: aliceblue; }
  50% {
    background-color: rgba(173, 216, 230, 0.5); }
  100% {
    background-color: aliceblue; } }

@-webkit-keyframes noteState {
  0% {
    background-color: aliceblue; }
  50% {
    background-color: lightblue;
    opacity: .5; }
  100% {
    background-color: aliceblue; } }

@keyframes noteState {
  0% {
    background-color: aliceblue; }
  50% {
    background-color: lightblue;
    opacity: .5; }
  100% {
    background-color: aliceblue; } }

.dr-cell,
dr-cell,
[dr-cell] {
  display: inline-block;
  vertical-align: top;
  position: relative; }

.cell {
  display: block;
  position: relative;
  padding: 10px;
  width: 60px;
  height: 60px;
  box-sizing: border-box;
  cursor: pointer; }
  .cell_type-square {
    background-color: aliceblue; }
  .cell_type-circle {
    background-color: aliceblue; }
  .cell_type-triangle {
    background-color: aliceblue; }
  .cell_state-active {
    -webkit-animation: activeState 1.0s linear infinite;
            animation: activeState 1.0s linear infinite; }
  .cell_state-passive {
    -webkit-animation: passiveState 1.0s linear infinite;
            animation: passiveState 1.0s linear infinite; }
  .cell_state-note {
    -webkit-animation: noteState 3.0s linear infinite;
            animation: noteState 3.0s linear infinite; }
  .cell__fig {
    position: absolute;
    top: 50%;
    left: 50%;
    margin-left: -20px;
    margin-top: -20px;
    width: 40px;
    height: 40px;
    border-radius: 3px; }
  .cell_type-square .cell__fig {
    background-color: coral; }
  .cell_type-circle .cell__fig {
    border-radius: 50%;
    background-color: rosybrown; }
  .cell_type-triangle .cell__fig {
    width: 0;
    height: 0;
    margin-left: -25px;
    background-color: transparent;
    border-style: solid;
    border-width: 0 25px 40px 25px;
    border-color: transparent transparent mediumseagreen transparent; }

.dr-field,
dr-field,
[dr-field] {
  display: block; }

.cell-list {
  position: relative; }
  .cell-list__item {
    position: absolute;
    outline: none;
    -webkit-transition: all .2s linear;
            transition: all .2s linear; }

ul, li {
  list-style: none;
  padding: 0;
  margin: 0; }
